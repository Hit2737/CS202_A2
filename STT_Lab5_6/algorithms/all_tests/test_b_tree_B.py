# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
from algorithms.tree import b_tree as module_0


def test_case_0():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(b_tree_0)


def test_case_1():
    int_0 = -959
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is False
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)


def test_case_2():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(b_tree_0)
    assert bool_0 is False


def test_case_3():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.remove_key(b_tree_0)


def test_case_4():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.traverse_tree()


def test_case_5():
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3


def test_case_6():
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_0 = node_0.__repr__()
    assert var_0 == "<id_node: []>"


def test_case_7():
    int_0 = -908
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)


def test_case_8():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_0)


def test_case_9():
    int_0 = -908
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)


def test_case_10():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.remove_key(b_tree_0)
    bool_1 = b_tree_0.find(int_0)
    assert bool_1 is True
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.insert_key(int_0)


def test_case_11():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = True
    var_0 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(int_0)
    assert bool_1 is False
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(bool_1)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.insert_key(int_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = -908
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    b_tree_0.remove_key(var_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(int_0)
    assert bool_1 is True
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.insert_key(int_0)
    b_tree_0.remove_key(var_1)


def test_case_14():
    int_0 = -908
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(int_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(int_0)


def test_case_15():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.traverse_tree()
    var_6 = b_tree_0.remove_key(bool_0)


def test_case_16():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.remove_key(bool_0)


def test_case_17():
    int_0 = 1725
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(bool_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_0)


def test_case_18():
    int_0 = -418
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(bool_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.remove_key(int_0)


def test_case_19():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(int_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_0)
    var_5 = b_tree_0.remove_key(int_0)


def test_case_20():
    int_0 = -418
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is True
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.insert_key(int_0)
    bool_2 = b_tree_0.find(int_0)
    assert bool_2 is True
    var_5 = b_tree_0.insert_key(int_0)
    var_6 = b_tree_0.remove_key(bool_1)
    var_7 = b_tree_0.remove_key(int_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = -965
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.insert_key(int_0)
    var_5 = b_tree_0.insert_key(int_0)
    var_6 = b_tree_0.remove_key(int_0)
    var_3.traverse_tree()


def test_case_22():
    int_0 = -418
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is True
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.insert_key(int_0)
    var_5 = b_tree_0.insert_key(int_0)
    var_6 = b_tree_0.remove_key(bool_1)


def test_case_23():
    int_0 = -418
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is True
    var_1 = b_tree_0.insert_key(bool_0)
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.remove_key(bool_1)
    var_5 = b_tree_0.remove_key(int_0)


def test_case_24():
    int_0 = -418
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_0 = b_tree_0.insert_key(int_0)
    var_1 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is True
    var_2 = b_tree_0.insert_key(bool_0)
    var_3 = b_tree_0.insert_key(bool_0)
    var_4 = b_tree_0.insert_key(int_0)
    var_5 = b_tree_0.insert_key(bool_0)
    var_6 = b_tree_0.remove_key(bool_1)


@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = -935
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    int_1 = -1578
    var_0 = b_tree_0.insert_key(int_1)
    var_1 = b_tree_0.insert_key(int_1)
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_2 = b_tree_0.traverse_tree()
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_3 = b_tree_0.insert_key(int_0)
    var_4 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is True
    var_5 = b_tree_0.insert_key(bool_0)
    var_6 = b_tree_0.insert_key(int_0)
    var_7 = b_tree_0.insert_key(int_0)
    var_8 = b_tree_0.remove_key(int_0)
    var_9 = b_tree_0.remove_key(bool_1)
    var_10 = b_tree_0.remove_key(int_0)
    node_1 = module_0.Node()
    var_11 = b_tree_0.remove_key(int_0)
    int_1.remove_key(var_7)


@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = -935
    b_tree_0 = module_0.BTree()
    assert b_tree_0.min_numbers_of_keys == 1
    assert b_tree_0.max_number_of_keys == 3
    int_1 = -1578
    var_0 = b_tree_0.insert_key(int_1)
    var_1 = b_tree_0.insert_key(int_1)
    node_0 = module_0.Node()
    assert (
        f"{type(module_0.Node.is_leaf).__module__}.{type(module_0.Node.is_leaf).__qualname__}"
        == "builtins.property"
    )
    var_2 = b_tree_0.traverse_tree()
    bool_0 = b_tree_0.find(int_0)
    assert bool_0 is False
    var_3 = b_tree_0.traverse_tree()
    var_4 = b_tree_0.insert_key(int_0)
    var_5 = b_tree_0.insert_key(bool_0)
    bool_1 = b_tree_0.find(bool_0)
    assert bool_1 is True
    var_6 = b_tree_0.insert_key(bool_0)
    var_7 = b_tree_0.insert_key(bool_0)
    var_8 = b_tree_0.insert_key(int_0)
    var_9 = b_tree_0.insert_key(int_0)
    var_10 = b_tree_0.insert_key(int_0)
    var_11 = b_tree_0.remove_key(int_0)
    var_12 = b_tree_0.remove_key(bool_1)
    var_13 = b_tree_0.remove_key(int_0)
    var_14 = b_tree_0.remove_key(int_0)
    var_3.remove_key(var_6)
