# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
from algorithms.tree import construct_tree_postorder_preorder as module_0


def test_case_0():
    bool_0 = True
    module_0.construct_tree(bool_0, bool_0, bool_0)
    assert module_0.pre_index == 370


@pytest.mark.xfail(strict=True)
def test_case_1():
    float_0 = 3560.419
    module_0.construct_tree_util(float_0, float_0, float_0, float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    module_0.print_inorder(bool_0)


def test_case_3():
    bool_0 = False
    tree_node_0 = module_0.TreeNode(bool_0)
    assert module_0.pre_index == 370


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    module_0.print_inorder(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    str_0 = "\nGiven a binary tree, return the zigzag level order traversal\nof its nodes' values.\n(ie, from left to right, then right to left\nfor the next level and alternate between).\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n    3\n   /   9  20\n    /     15   7\nreturn its zigzag level order traversal as:\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n"
    list_0 = [str_0, str_0]
    int_0 = 926
    var_0 = module_0.construct_tree_util(str_0, list_0, int_0, int_0, int_0)
    tree_node_0 = module_0.TreeNode(none_type_0)
    float_0 = 764.1
    int_1 = 285
    module_0.construct_tree_util(str_0, float_0, int_1, int_1, var_0)


def test_case_6():
    int_0 = -3957
    tree_node_0 = module_0.TreeNode(int_0)
    assert module_0.pre_index == 370
    int_1 = 125
    var_0 = module_0.construct_tree_util(tree_node_0, int_0, int_1, int_0, int_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 343
    dict_0 = {int_0: int_0, int_0: int_0}
    tree_node_0 = module_0.TreeNode(dict_0, int_0, int_0)
    assert module_0.pre_index == 370
    list_0 = [dict_0, dict_0, int_0, dict_0]
    module_0.construct_tree_util(list_0, dict_0, list_0, int_0, int_0)
    int_1 = 2218
    var_0 = module_0.construct_tree(dict_0, list_0, int_1)
