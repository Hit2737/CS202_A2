# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
from algorithms.tree import lowest_common_ancestor as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"i"
    none_type_0 = None
    var_0 = module_0.lca(bytes_0, none_type_0, bytes_0)
    assert var_0 == b"i"
    var_1 = module_0.lca(none_type_0, var_0, var_0)
    bytes_1 = b"\xa9b)\x07\xa6:\xcd\xe2j"
    module_0.lca(bytes_1, bytes_0, var_1)


def test_case_1():
    bytes_0 = b"\x08\xbc\x88\xa7\xc2\xf2\x02\xd0\xee\x0bOcTn"
    var_0 = module_0.lca(bytes_0, bytes_0, bytes_0)
    assert var_0 == b"\x08\xbc\x88\xa7\xc2\xf2\x02\xd0\xee\x0bOcTn"


def test_case_2():
    float_0 = 1228.02
    none_type_0 = None
    var_0 = module_0.lca(float_0, none_type_0, float_0)
    assert var_0 == pytest.approx(1228.02, abs=0.01, rel=0.01)
    var_1 = module_0.lca(float_0, float_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"kqve\xd5"
    set_0 = {bytes_0, bytes_0, bytes_0}
    none_type_0 = None
    module_0.lca(set_0, none_type_0, none_type_0)
